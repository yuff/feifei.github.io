call vs apply vs bind
这三个方法都可以改变运行时上下文（this）
关于三者的区别， stackoverflow上有一篇解释：
http://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind
简单来说，就是call和apply是立即执行的，而bind则需要等到函数被调用时才被执行
call和apply的区别就在于接受参数的不同，apply接受array形式的参数，而call则需要罗列所有的参数，one by one

theFunction.apply(valueForThis, arrayOfArgs)

theFunction.call(valueForThis, arg1, arg2, ...)

http://www.cnblogs.com/coco1s/p/4833199.html这篇文章介绍的也很清楚，mark一下

“在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。

JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。”

e.g:
call()

function Product() {
	this.name='product';
	this.price='0';
	this.category='NO CATEGORY';
}
Product.prototype.printProduct = function(){
  	console.log('the name is: ' + this.name + ', the price is: ' + this.price + ' and the category is: ' + this.category);
}

function Food(name, price) {
	this.category = 'food';
	this.name = name;
	this.price = price;
}

function Toy(name, price) {
	this.category = 'toy';
	this.name = name;
	this.price = price;
}

var cheese = new Food('feta', 5);
var fun = new Toy('robot', 40);
var prod = new Product();
Product.prototype.printProduct.call(cheese);
prod.printProduct.call(fun); 
prod.printProduct();